/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package pkg;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ASSIGNMENT = 5;
  /** RegularExpression Id. */
  int PLUS = 6;
  /** RegularExpression Id. */
  int MINUS = 7;
  /** RegularExpression Id. */
  int MULTIPLY = 8;
  /** RegularExpression Id. */
  int DIVIDE = 9;
  /** RegularExpression Id. */
  int EQUAL = 10;
  /** RegularExpression Id. */
  int NOTEQUAL = 11;
  /** RegularExpression Id. */
  int GREATER = 12;
  /** RegularExpression Id. */
  int LESS = 13;
  /** RegularExpression Id. */
  int GREATEREQ = 14;
  /** RegularExpression Id. */
  int LESSEQ = 15;
  /** RegularExpression Id. */
  int INCREMENT = 16;
  /** RegularExpression Id. */
  int DECREMENT = 17;
  /** RegularExpression Id. */
  int BEGIN = 18;
  /** RegularExpression Id. */
  int END = 19;
  /** RegularExpression Id. */
  int INITBLOCK = 20;
  /** RegularExpression Id. */
  int CODEBLOCK = 21;
  /** RegularExpression Id. */
  int OUTPUT = 22;
  /** RegularExpression Id. */
  int IFSTART = 23;
  /** RegularExpression Id. */
  int ELSEST = 24;
  /** RegularExpression Id. */
  int IFEND = 25;
  /** RegularExpression Id. */
  int LOOPSTART = 26;
  /** RegularExpression Id. */
  int LOOPEND = 27;
  /** RegularExpression Id. */
  int INTEGER = 28;
  /** RegularExpression Id. */
  int CONSTANT = 29;
  /** RegularExpression Id. */
  int DIGIT = 30;
  /** RegularExpression Id. */
  int ID = 31;
  /** RegularExpression Id. */
  int ALPHA = 32;
  /** RegularExpression Id. */
  int LBRACKET = 33;
  /** RegularExpression Id. */
  int RBRACKET = 34;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"++\"",
    "\"--\"",
    "\"StartProgram\"",
    "\"endProgram\"",
    "\"initializationBlock:\"",
    "\"codeBlock:\"",
    "\"outString\"",
    "\"ifStart\"",
    "\"else\"",
    "\"ifEnd\"",
    "\"forLoop\"",
    "\"endLoop\"",
    "\"int\"",
    "<CONSTANT>",
    "<DIGIT>",
    "<ID>",
    "<ALPHA>",
    "\"(\"",
    "\")\"",
    "\";\"",
  };

}
